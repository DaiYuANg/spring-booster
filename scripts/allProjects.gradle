allprojects {
    sourceCompatibility = '17'
    targetCompatibility = '17'

    apply {
        plugin("me.champeau.jmh")
        plugin("io.freefair.lombok")
        plugin("org.jetbrains.kotlin.jvm")
        plugin("org.jetbrains.kotlin.plugin.lombok")
        plugin("org.jetbrains.kotlin.plugin.allopen")
        plugin("org.jetbrains.kotlin.kapt")
        plugin("org.jetbrains.kotlinx.benchmark")
        plugin("maven-publish")
        plugin("ivy-publish")
        plugin("groovy")
        plugin("scala")
    }

    repositories {
        mavenLocal()
        gradlePluginPortal()
        mavenCentral()
    }

    dependencies {
        implementation("com.google.code.gson:gson:${gsonVersion}")
        implementation("org.mapstruct:mapstruct:${mapstructVersion}")
        implementation("com.google.guava:guava:${guavaVersion}")
        implementation("org.slf4j:slf4j-api:${slf4jVersion}")
        implementation("com.github.ben-manes.caffeine:caffeine:${caffeineVersion}")
        implementation("com.github.ben-manes.caffeine:guava:${caffeineVersion}")
        implementation("com.github.ben-manes.caffeine:jcache:${caffeineVersion}")
        implementation("io.reactivex.rxjava3:rxjava:${rxjavaVersion}")
        implementation("org.aspectj:aspectjtools:${aspectjVersion}")
        implementation 'org.agrona:agrona:1.18.1'
        implementation 'com.google.zxing:zxing-parent:3.5.1'
        annotationProcessor("org.mapstruct:mapstruct-processor:${mapstructVersion}")
        runtimeOnly("org.aspectj:aspectjrt:${aspectjVersion}")
        runtimeOnly("org.aspectj:aspectjweaver:${aspectjVersion}")
        compileOnly("org.jetbrains:annotations:${jetbrainsAnnotationsVersion}")
        compileOnly "org.immutables:value:${immutablesVersion}"

        testImplementation platform("org.junit:junit-bom:${junitVersion}")
        testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
        testImplementation("org.jetbrains.kotlin:kotlin-test")
//        testImplementation("org.slf4j:slf4j-simple:${slf4jVersion}")
        testImplementation("org.testcontainers:testcontainers:${testContainersVersion}")
        testImplementation("io.rest-assured:rest-assured:${restAssuredVersion}")
        testImplementation("org.assertj:assertj-core:3.11.1")
        testImplementation("org.mockito:mockito-core:5.3.1")

    }

    test {
        useJUnitPlatform()
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    compileJava.options.encoding = "UTF-8"
    compileTestJava.options.encoding = "UTF-8"

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of("${jdkVersion}"))
        }
    }

    tasks.register('customDoc', Javadoc) {
        source = sourceSets.main.allJava
    }

    kapt {
        keepJavacAnnotationProcessors = true
    }
}
