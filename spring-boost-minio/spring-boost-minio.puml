@startuml
!pragma useIntermediatePackages false

class "ErrorResponseException" as io.minio.errors.ErrorResponseException {
  +ErrorResponse errorResponse()
  +Response response()
}
class "InsufficientDataException" as io.minio.errors.InsufficientDataException {
}
class "InternalException" as io.minio.errors.InternalException {
}
class "InvalidResponseException" as io.minio.errors.InvalidResponseException {
}
class "MinioException" as io.minio.errors.MinioException {
  +String httpTrace()
}
class "ServerException" as io.minio.errors.ServerException {
  +int statusCode()
}
class "XmlParserException" as io.minio.errors.XmlParserException {
}
annotation "Nonnull" as javax.annotation.Nonnull {
  + {abstract}When when()
}
annotation "TypeQualifier" as javax.annotation.meta.TypeQualifier {
  + {abstract}Class<?> applicableTo()
}
annotation "TypeQualifierNickname" as javax.annotation.meta.TypeQualifierNickname {
}
enum "When" as javax.annotation.meta.When {
  ALWAYS
  UNKNOWN
  MAYBE
  NEVER
}
annotation "Metadata" as kotlin.Metadata {
  __
  + {abstract}int k()
  + {abstract}int[] mv()
  + {abstract}int[] bv()
  + {abstract}String[] d1()
  + {abstract}String[] d2()
  + {abstract}String xs()
  + {abstract}String pn()
  + {abstract}int xi()
}
annotation "SinceKotlin" as kotlin.SinceKotlin {
  + {abstract}String version()
}
enum "AnnotationRetention" as kotlin.annotation.AnnotationRetention {
  SOURCE
  BINARY
  RUNTIME
  __
  + {static}EnumEntries<AnnotationRetention> getEntries()
}
enum "AnnotationTarget" as kotlin.annotation.AnnotationTarget {
  CLASS
  ANNOTATION_CLASS
  TYPE_PARAMETER
  PROPERTY
  FIELD
  LOCAL_VARIABLE
  VALUE_PARAMETER
  CONSTRUCTOR
  FUNCTION
  PROPERTY_GETTER
  PROPERTY_SETTER
  TYPE
  EXPRESSION
  FILE
  TYPEALIAS
  __
  + {static}EnumEntries<AnnotationTarget> getEntries()
}
annotation "MustBeDocumented" as kotlin.annotation.MustBeDocumented {
}
annotation "Retention" as kotlin.annotation.Retention {
  + {abstract}AnnotationRetention value()
}
annotation "Target" as kotlin.annotation.Target {
  + {abstract}AnnotationTarget[] allowedTargets()
}
annotation "JvmName" as kotlin.jvm.JvmName {
  + {abstract}String name()
}
annotation "NonNull" as lombok.NonNull {
}
annotation "NonNls" as org.jetbrains.annotations.NonNls {
}
annotation "NotNull" as org.jetbrains.annotations.NotNull {
  + {abstract}String value()
  + {abstract}Class<? extends Exception> exception()
}
annotation "Nullable" as org.jetbrains.annotations.Nullable {
  + {abstract}String value()
}
abstract class "LoggingEvent" as org.spring.boost.common.struct.LoggingEvent {
}
interface "MinioCreate" as org.spring.boost.minio.MinioCreate {
  + {abstract}ObjectWriteResponse createObject(InputStream, String, String, String, Map<String, String>)
  + {abstract}ObjectWriteResponse createObject(InputStream, String, String, Map<String, String>)
  + {abstract}ObjectWriteResponse createObject(InputStream, String, Map<String, String>)
  + {abstract}ObjectWriteResponse createObject(byte[], String, String, String, Map<String, String>)
  + {abstract}ObjectWriteResponse createObject(byte[], String, String, String, Tags)
  + {abstract}ObjectWriteResponse createObject(byte[], String, String, Tags)
  + {abstract}ObjectWriteResponse createObject(byte[], String, Tags)
  + {abstract}ObjectWriteResponse createObject(byte[], String)
  + {abstract}ObjectWriteResponse createObject(MultipartFile, String, String, String, Map<String, String>)
  + {abstract}ObjectWriteResponse createObject(MultipartFile, String, String, Map<String, String>)
  + {abstract}ObjectWriteResponse createObject(MultipartFile, String, Map<String, String>)
  + {abstract}ObjectWriteResponse createObject(MultipartFile, String)
  + {abstract}ObjectWriteResponse createObject(File, String, String, Map<String, String>)
  + {abstract}ObjectWriteResponse createObject(File, String, Map<String, String>)
  + {abstract}ObjectWriteResponse createObject(File, String)
}
class "MinioCreateTemplate" as org.spring.boost.minio.MinioCreateTemplate {
  +ObjectWriteResponse createObject(InputStream, String, String, String, Map<String, String>)
  +ObjectWriteResponse createObject(InputStream, String, String, Map<String, String>)
  +ObjectWriteResponse createObject(InputStream, String, Map<String, String>)
  +ObjectWriteResponse createObject(byte[], String, String, String, Map<String, String>)
  +ObjectWriteResponse createObject(byte[], String, String, String, Tags)
  +ObjectWriteResponse createObject(byte[], String, String, Tags)
  +ObjectWriteResponse createObject(byte[], String, Tags)
  +ObjectWriteResponse createObject(byte[], String)
  +ObjectWriteResponse createObject(MultipartFile, String, String, String, Map<String, String>)
  +ObjectWriteResponse createObject(MultipartFile, String, String, Map<String, String>)
  +ObjectWriteResponse createObject(MultipartFile, String, Map<String, String>)
  +ObjectWriteResponse createObject(MultipartFile, String)
  +ObjectWriteResponse createObject(File, String, String, Map<String, String>)
  +ObjectWriteResponse createObject(File, String, Map<String, String>)
  +ObjectWriteResponse createObject(File, String)
}
interface "MinioDelete" as org.spring.boost.minio.MinioDelete {
}
class "MinioDeleteTemplate" as org.spring.boost.minio.MinioDeleteTemplate {
}
interface "MinioGet" as org.spring.boost.minio.MinioGet {
  + {abstract}GetObjectResponse getObject(String)
  + {abstract}Optional<GetObjectResponse> getObjectOptional(String)
  + {abstract}Optional<GetObjectResponse> getObjectByTag(String)
}
class "MinioGetTemplate" as org.spring.boost.minio.MinioGetTemplate {
  +GetObjectResponse getObject(String)
  +Optional<GetObjectResponse> getObjectOptional(String)
  +Optional<GetObjectResponse> getObjectByTag(String)
}
class "MinioTemplate" as org.spring.boost.minio.MinioTemplate {
  +ObjectWriteResponse createObject(InputStream, String, String, String, Map<String, String>)
  +ObjectWriteResponse createObject(InputStream, String, String, Map<String, String>)
  +ObjectWriteResponse createObject(InputStream, String, Map<String, String>)
  +ObjectWriteResponse createObject(byte[], String, String, String, Map<String, String>)
  +ObjectWriteResponse createObject(byte[], String, String, String, Tags)
  +ObjectWriteResponse createObject(byte[], String, String, Tags)
  +ObjectWriteResponse createObject(byte[], String, Tags)
  +ObjectWriteResponse createObject(byte[], String)
  +ObjectWriteResponse createObject(MultipartFile, String, String, String, Map<String, String>)
  +ObjectWriteResponse createObject(MultipartFile, String, String, Map<String, String>)
  +ObjectWriteResponse createObject(MultipartFile, String, Map<String, String>)
  +ObjectWriteResponse createObject(MultipartFile, String)
  +ObjectWriteResponse createObject(File, String, String, Map<String, String>)
  +ObjectWriteResponse createObject(File, String, Map<String, String>)
  +ObjectWriteResponse createObject(File, String)
  +GetObjectResponse getObject(String)
  +Optional<GetObjectResponse> getObjectOptional(String)
  +Optional<GetObjectResponse> getObjectByTag(String)
}
class "MinioAutoConfigure" as org.spring.boost.minio.autoconfigure.MinioAutoConfigure {
  +OkHttpClient okHttpClient()
  +Tika tika()
  +MinioClientBeanFactoryPostProcessor minioClientBeanFactoryPostProcessor(Environment, OkHttpClient)
  +MinioAdminClientBeanFactoryPostProcessor minioAdminClientBeanFactoryPostProcessor(Environment, OkHttpClient)
  +MinioTemplateBeanFactoryPostProcessor minioTemplateBeanFactoryPostProcessor(Tika, Environment)
}
class "ObjectCreateEvent" as org.spring.boost.minio.event.ObjectCreateEvent {
  +ObjectWriteResponse getResponse()
}
enum "BeanNaming" as org.spring.boost.minio.factory.BeanNaming {
  CREATE_TEMPLATE
  GET_TEMPLATE
  ADMIN
  __
  +String getNaming()
}
class "MinioAdminClientBeanFactoryPostProcessor" as org.spring.boost.minio.factory.MinioAdminClientBeanFactoryPostProcessor {
  +void postProcessBeanFactory(ConfigurableListableBeanFactory)
}
class "MinioClientBeanFactoryPostProcessor" as org.spring.boost.minio.factory.MinioClientBeanFactoryPostProcessor {
  +void postProcessBeanFactory(ConfigurableListableBeanFactory)
}
class "MinioTemplateBeanFactoryPostProcessor" as org.spring.boost.minio.factory.MinioTemplateBeanFactoryPostProcessor {
  +void postProcessBeanFactory(ConfigurableListableBeanFactory)
  + {static}MinioTemplateBeanFactoryPostProcessorBuilder builder()
}
class "MinioTemplateBeanFactoryPostProcessor$MinioTemplateBeanFactoryPostProcessorBuilder" as org.spring.boost.minio.factory.MinioTemplateBeanFactoryPostProcessor$MinioTemplateBeanFactoryPostProcessorBuilder {
  +MinioTemplateBeanFactoryPostProcessorBuilder properties(MinioConfigurationProperties)
  +MinioTemplateBeanFactoryPostProcessorBuilder tika(Tika)
  +MinioTemplateBeanFactoryPostProcessor build()
}
class "EventMinioHook" as org.spring.boost.minio.hook.EventMinioHook {
  +void afterCreateSuccess(ObjectWriteResponse)
}
interface "MinioHook" as org.spring.boost.minio.hook.MinioHook {
  +void beforeCreate(PutObjectArgs, String, String, String, Map<String, String>)
  +void afterCreateSuccess(ObjectWriteResponse)
  +void afterCreateFailure(String, String, String, Map<String, String>, Exception)
}
class "MinioClientConfig" as org.spring.boost.minio.properties.MinioClientConfig {
  +String getEndpoint()
  +String getAccessKey()
  +String getSecretKey()
  +String getBucket()
  +String getRegion()
  +boolean isEnableAdmin()
  +boolean isEnableTemplate()
  +void setEndpoint(String)
  +void setAccessKey(String)
  +void setSecretKey(String)
  +void setBucket(String)
  +void setRegion(String)
  +void setEnableAdmin(boolean)
  +void setEnableTemplate(boolean)
}
class "MinioConfigurationProperties" as org.spring.boost.minio.properties.MinioConfigurationProperties {
  ..
  + {static}String prefix
  __
  +Map<String, MinioClientConfig> getClients()
  +boolean isCheckDuplicate()
  +void setClients(Map<String, MinioClientConfig>)
  +void setCheckDuplicate(boolean)
}
class "MinioCreateTemplate" as org.spring.boost.minio.template.MinioCreateTemplate {
  +ObjectWriteResponse createObject(InputStream, String, String, String, Map<String, String>)
  +ObjectWriteResponse createObject(InputStream, String, String, Map<String, String>)
  +ObjectWriteResponse createObject(InputStream, String, Map<String, String>)
  +ObjectWriteResponse createObject(byte[], String, String, String, Map<String, String>)
  +ObjectWriteResponse createObject(byte[], String, String, String, Tags)
  +ObjectWriteResponse createObject(byte[], String, String, Tags)
  +ObjectWriteResponse createObject(byte[], String, Tags)
  +ObjectWriteResponse createObject(byte[], String)
  +ObjectWriteResponse createObject(MultipartFile, String, String, String, Map<String, String>)
  +ObjectWriteResponse createObject(MultipartFile, String, String, Map<String, String>)
  +ObjectWriteResponse createObject(MultipartFile, String, Map<String, String>)
  +ObjectWriteResponse createObject(MultipartFile, String)
  +ObjectWriteResponse createObject(File, String, String, Map<String, String>)
  +ObjectWriteResponse createObject(File, String, Map<String, String>)
  +ObjectWriteResponse createObject(File, String)
  + {static}MinioCreateTemplateBuilder builder()
}
abstract class "MinioCreateTemplate$MinioCreateTemplateBuilder" as org.spring.boost.minio.template.MinioCreateTemplate$MinioCreateTemplateBuilder<C extends MinioCreateTemplate, B extends MinioCreateTemplateBuilder<C, B>> {
  + {abstract}C build()
}
class "MinioCreateTemplate$MinioCreateTemplateBuilderImpl" as org.spring.boost.minio.template.MinioCreateTemplate$MinioCreateTemplateBuilderImpl {
  +MinioCreateTemplate build()
}
class "MinioGetTemplate" as org.spring.boost.minio.template.MinioGetTemplate {
  +GetObjectResponse getObject(String)
  +Optional<GetObjectResponse> getObjectOptional(String)
  +Optional<GetObjectResponse> getObjectByTag(String)
  + {static}MinioGetTemplateBuilder builder()
}
abstract class "MinioGetTemplate$MinioGetTemplateBuilder" as org.spring.boost.minio.template.MinioGetTemplate$MinioGetTemplateBuilder<C extends MinioGetTemplate, B extends MinioGetTemplateBuilder<C, B>> {
  + {abstract}C build()
}
class "MinioGetTemplate$MinioGetTemplateBuilderImpl" as org.spring.boost.minio.template.MinioGetTemplate$MinioGetTemplateBuilderImpl {
  +MinioGetTemplate build()
}
class "MinioTemplate" as org.spring.boost.minio.template.MinioTemplate {
  + {static}MinioTemplateBuilder builder()
  +MinioClient getClient()
  +MinioAdminClient getAdminClient()
  +Tika getTika()
}
abstract class "MinioTemplate$MinioTemplateBuilder" as org.spring.boost.minio.template.MinioTemplate$MinioTemplateBuilder<C extends MinioTemplate, B extends MinioTemplateBuilder<C, B>> {
  +B client(MinioClient)
  +B adminClient(MinioAdminClient)
  +B bucket(String)
  +B tika(Tika)
  +B hook(MinioHook)
  +B hooks(Iterable<? extends MinioHook>)
  +B clearHooks()
  +B checkDuplicate(boolean)
  + {abstract}C build()
}
class "MinioTemplate$MinioTemplateBuilderImpl" as org.spring.boost.minio.template.MinioTemplate$MinioTemplateBuilderImpl {
  +MinioTemplate build()
}
class "TemplateArg" as org.spring.boost.minio.template.TemplateArg {
  + {static}TemplateArgBuilder builder()
  +MinioClient getClient()
  +MinioAdminClient getAdminClient()
  +Tika getTika()
}
class "TemplateArg$TemplateArgBuilder" as org.spring.boost.minio.template.TemplateArg$TemplateArgBuilder {
  +TemplateArgBuilder client(MinioClient)
  +TemplateArgBuilder adminClient(MinioAdminClient)
  +TemplateArgBuilder bucket(String)
  +TemplateArgBuilder tika(Tika)
  +TemplateArgBuilder hook(MinioHook)
  +TemplateArgBuilder hooks(Iterable<? extends MinioHook>)
  +TemplateArgBuilder clearHooks()
  +TemplateArgBuilder checkDuplicate(boolean)
  +TemplateArg build()
}
abstract class "BeansException" as org.springframework.beans.BeansException {
}
interface "BeanFactoryPostProcessor" as org.springframework.beans.factory.config.BeanFactoryPostProcessor {
  + {abstract}void postProcessBeanFactory(ConfigurableListableBeanFactory)
}
annotation "AutoConfiguration" as org.springframework.boot.autoconfigure.AutoConfiguration {
  + {abstract}String value()
  + {abstract}Class<?>[] before()
  + {abstract}String[] beforeName()
  + {abstract}Class<?>[] after()
  + {abstract}String[] afterName()
}
annotation "AutoConfigureAfter" as org.springframework.boot.autoconfigure.AutoConfigureAfter {
  + {abstract}Class<?>[] value()
  + {abstract}String[] name()
}
annotation "AutoConfigureBefore" as org.springframework.boot.autoconfigure.AutoConfigureBefore {
  + {abstract}Class<?>[] value()
  + {abstract}String[] name()
}
annotation "ConfigurationProperties" as org.springframework.boot.context.properties.ConfigurationProperties {
  + {abstract}String value()
  + {abstract}String prefix()
  + {abstract}boolean ignoreInvalidFields()
  + {abstract}boolean ignoreUnknownFields()
}
annotation "EnableConfigurationProperties" as org.springframework.boot.context.properties.EnableConfigurationProperties {
  + {static}String VALIDATOR_BEAN_NAME
  __
  + {abstract}Class<?>[] value()
}
class "EnableConfigurationPropertiesRegistrar" as org.springframework.boot.context.properties.EnableConfigurationPropertiesRegistrar {
  +void registerBeanDefinitions(AnnotationMetadata, BeanDefinitionRegistry)
}
abstract class "ApplicationEvent" as org.springframework.context.ApplicationEvent {
  +long getTimestamp()
}
annotation "Bean" as org.springframework.context.annotation.Bean {
  + {abstract}String[] value()
  + {abstract}String[] name()
  + {abstract}boolean autowireCandidate()
  + {abstract}String initMethod()
  + {abstract}String destroyMethod()
}
annotation "Configuration" as org.springframework.context.annotation.Configuration {
  + {abstract}String value()
  + {abstract}boolean proxyBeanMethods()
  + {abstract}boolean enforceUniqueMethods()
}
annotation "DependsOn" as org.springframework.context.annotation.DependsOn {
  + {abstract}String[] value()
}
annotation "Import" as org.springframework.context.annotation.Import {
  + {abstract}Class<?>[] value()
}
interface "ImportBeanDefinitionRegistrar" as org.springframework.context.annotation.ImportBeanDefinitionRegistrar {
  +void registerBeanDefinitions(AnnotationMetadata, BeanDefinitionRegistry, BeanNameGenerator)
  +void registerBeanDefinitions(AnnotationMetadata, BeanDefinitionRegistry)
}
abstract class "NestedRuntimeException" as org.springframework.core.NestedRuntimeException {
  +Throwable getRootCause()
  +Throwable getMostSpecificCause()
  +boolean contains(Class<?>)
}
annotation "AliasFor" as org.springframework.core.annotation.AliasFor {
  + {abstract}String value()
  + {abstract}String attribute()
  + {abstract}Class<? extends Annotation> annotation()
}
annotation "Order" as org.springframework.core.annotation.Order {
  + {abstract}int value()
}
annotation "Nullable" as org.springframework.lang.Nullable {
}
annotation "Component" as org.springframework.stereotype.Component {
  + {abstract}String value()
}
annotation "Indexed" as org.springframework.stereotype.Indexed {
}
io.minio.errors.ErrorResponseException -u-|> io.minio.errors.MinioException
io.minio.errors.InsufficientDataException -u-|> io.minio.errors.MinioException
io.minio.errors.InternalException -u-|> io.minio.errors.MinioException
io.minio.errors.InvalidResponseException -u-|> io.minio.errors.MinioException
io.minio.errors.ServerException -u-|> io.minio.errors.MinioException
io.minio.errors.XmlParserException -u-|> io.minio.errors.MinioException
org.spring.boost.common.struct.LoggingEvent -u-|> org.springframework.context.ApplicationEvent
org.spring.boost.minio.MinioCreateTemplate .u.|> org.spring.boost.minio.MinioCreate
org.spring.boost.minio.MinioDeleteTemplate .u.|> org.spring.boost.minio.MinioDelete
org.spring.boost.minio.MinioGetTemplate .u.|> org.spring.boost.minio.MinioGet
org.spring.boost.minio.MinioTemplate .u.|> org.spring.boost.minio.MinioGet
org.spring.boost.minio.MinioTemplate .u.|> org.spring.boost.minio.MinioCreate
org.spring.boost.minio.MinioTemplate .u.|> org.spring.boost.minio.MinioDelete
org.spring.boost.minio.MinioTemplate --> org.spring.boost.minio.MinioGetTemplate
org.spring.boost.minio.MinioTemplate --> org.spring.boost.minio.MinioDeleteTemplate
org.spring.boost.minio.MinioTemplate --> org.spring.boost.minio.MinioCreateTemplate
org.spring.boost.minio.autoconfigure.MinioAutoConfigure --> org.spring.boost.minio.properties.MinioConfigurationProperties
org.spring.boost.minio.event.ObjectCreateEvent -u-|> org.spring.boost.common.struct.LoggingEvent
org.spring.boost.minio.factory.MinioAdminClientBeanFactoryPostProcessor .u.|> org.springframework.beans.factory.config.BeanFactoryPostProcessor
org.spring.boost.minio.factory.MinioAdminClientBeanFactoryPostProcessor --> org.spring.boost.minio.properties.MinioConfigurationProperties
org.spring.boost.minio.factory.MinioClientBeanFactoryPostProcessor .u.|> org.springframework.beans.factory.config.BeanFactoryPostProcessor
org.spring.boost.minio.factory.MinioClientBeanFactoryPostProcessor --> org.spring.boost.minio.properties.MinioConfigurationProperties
org.spring.boost.minio.factory.MinioTemplateBeanFactoryPostProcessor .u.|> org.springframework.beans.factory.config.BeanFactoryPostProcessor
org.spring.boost.minio.factory.MinioTemplateBeanFactoryPostProcessor --> org.spring.boost.minio.properties.MinioConfigurationProperties
org.spring.boost.minio.factory.MinioTemplateBeanFactoryPostProcessor$MinioTemplateBeanFactoryPostProcessorBuilder --> org.spring.boost.minio.properties.MinioConfigurationProperties
org.spring.boost.minio.hook.EventMinioHook .u.|> org.spring.boost.minio.hook.MinioHook
org.spring.boost.minio.properties.MinioConfigurationProperties --> org.spring.boost.minio.properties.MinioClientConfig
org.spring.boost.minio.template.MinioCreateTemplate -u-|> org.spring.boost.minio.template.MinioTemplate
org.spring.boost.minio.template.MinioCreateTemplate$MinioCreateTemplateBuilder -u-|> org.spring.boost.minio.template.MinioTemplate$MinioTemplateBuilder
org.spring.boost.minio.template.MinioCreateTemplate$MinioCreateTemplateBuilderImpl -u-|> org.spring.boost.minio.template.MinioCreateTemplate$MinioCreateTemplateBuilder
org.spring.boost.minio.template.MinioGetTemplate -u-|> org.spring.boost.minio.template.MinioTemplate
org.spring.boost.minio.template.MinioGetTemplate$MinioGetTemplateBuilder -u-|> org.spring.boost.minio.template.MinioTemplate$MinioTemplateBuilder
org.spring.boost.minio.template.MinioGetTemplate$MinioGetTemplateBuilderImpl -u-|> org.spring.boost.minio.template.MinioGetTemplate$MinioGetTemplateBuilder
org.spring.boost.minio.template.MinioTemplate --> org.spring.boost.minio.hook.MinioHook
org.spring.boost.minio.template.MinioTemplate$MinioTemplateBuilderImpl -u-|> org.spring.boost.minio.template.MinioTemplate$MinioTemplateBuilder
org.spring.boost.minio.template.TemplateArg --> org.spring.boost.minio.hook.MinioHook
org.springframework.beans.BeansException -u-|> org.springframework.core.NestedRuntimeException
org.springframework.boot.context.properties.EnableConfigurationPropertiesRegistrar .u.|> org.springframework.context.annotation.ImportBeanDefinitionRegistrar
@enduml
